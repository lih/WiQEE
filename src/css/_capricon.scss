@mixin keyword($name, $tint: 0deg) {
    &[data-symbol-name = "#{$name}"] { font-weight: bold; --tint: #{$tint}; @include set-level(6); }
}
@mixin keyword-replace($name, $repl, $color: primary) {
    &[data-symbol-name = "#{$name}"] {
	visibility: hidden;
	position: relative;
	&::after {
	    position: absolute;
	    top: 0; left: 0;
	    visibility: visible;
	    font-weight: bold;
	    @extend .#{$color};
	    @include set-level(6);
	    content: "#{$repl}"; }
    }
}

.sheet .capricon {
    span.symbol {
	@each $k in ('exec', '[',']','each', 'dup','$','swap','dupn','shift','shaft','def','printf', 'cons', 'pop', 'range', 'print', 'swapn', 'format', 'stack', 'set-stack') {
	    @include keyword($k); }
	@each $k in ('{',',{','${','}') {
	    @include keyword($k,hexad-2);
	    // &[data-symbol-name = "#{$name}"] { font-weight: bold; color: $color; }
	};
	@each $k in ('(',')','type','defconstr', 'hypotheses', 'variable', 'universe', 'extro-forall', 'extro-lambda', 'apply', 'mu', 'pattern-index', 'set-pattern-index', 'index-insert', 'pull', 'intro') {
	    @include keyword($k,hexad-2) };
	@each $k in (('!','λ'),('?','∀'),('->','→'),('\'foralls','\'∀*'),('\'lambdas','\'λ*')) {
	    @include keyword-replace(nth($k,1),nth($k,2)); }
	&[data-symbol-name ^= "\'"] { font-style: italic; @extend .pentad-2; @include set-level(2); }
	&[data-symbol-name ^= '"'][data-symbol-name $= '"'] { font-style: italic; @extend .pentad-4; @include set-level(1); }
    }
    span.quote {
	border-radius: 0.5em;
    }
}

@mixin quoteDepth($type,$depth,$max) {
    --#{nth($type,1)}-depth: #{$depth};
    
    @if ($max > 0) {
	span.quote.quote-#{nth($type,2)} {
	    @include quoteDepth($type,$depth + 1, $max - 1);
	}
    }
}
.capricon {
    --quote-depth: 0;
    --unquote-depth: 0;
    --max-contrast: 85%;
    span.quote {
	* { --quote-depth: inherit;
	    --unquote-depth: inherit; }
	@extend .opaque;
	--tint: calc((var(--quote-depth) - var(--unquote-depth)) * -60deg);
	@include quoteDepth(('quote','brace'),1,9);
	@include quoteDepth(('unquote','splice'),0,9);
	@include quoteDepth(('unquote','exec'),0,9);
    }
}
.user-input {
    display: block; width: 100%;
    .capricon-trigger {
	display: inline-block;
	width: 15%;
    }
    .capricon-input-prefix {
	display: inline-block;
	&, * { color: white !important; }
	& { background-image: linear-gradient(to right, black 0 5%, rgba(white,0.1) 10%, rgba(white,0) 100%); }
	.capricon-input {
	    transition: background 1s, opacity 1s;
	    display: inline-block;
	    background-color: black;
	    background-image: linear-gradient(to right, black, rgba(black,0.5) 40%, rgba(black,0.5) 60%, rgba(black,1) 100%);
	    opacity: 0;
	    &.pending { background-color: green; opacity: 0.5; }
	    &.ready { background-color: mix(black,green,80%);
		      opacity: 1; }
	    border: none;
	    font-family: mono;
	    width: calc(100% - 1em);
	}
	border-width: 1px;
	border-style: solid;
	width: calc(84% - 2px);
	@extend .with-border;
    }
    .capricon-output { display: none; }
}

.capricon-examples {
    &::before {
	content: "Examples: "; font-weight: bold; display: inline-block;
	height: $line-height * 1.25em;
	padding: $line-height * 0.125em;
	vertical-align: middle;
    }
    display: block;
    height: $line-height * 1.25em;
    width: 100%;
    overflow-y: auto;
    .capricon-example {
	display: inline-block;
	max-width: 25%;
	* { padding: 0; margin: 0; }
    }
}

.capricon-result {
    display: inline;
    font-style: italic;
}
.capricon-paragraphresult {
    display: block;
    margin-bottom: 1em;
}

.capricon-show::before {
    content: "Show Steps";
}
.capricon-hide::before {
    content: "Hide Steps";
}
.expansible {
    &.inline .capricon-show { display: none !important; }
    .capricon-steps { position: relative; width: 100%; }
    .capricon-paragraph {
	margin: 0; padding: 0;
	display: block;
	max-width: none;
	width: 100%;
    }
}

#capricon-console {
    @extend .frame;
    z-index: 1000;
    .capricon-steps {
	display: none;

	@extend .sheet;
	@extend .with-border;
	@extend .opaque;
	border-radius: 0.2em;
	border-width: 2px;
	border-style: solid; 

	&.active {
	    display: block;
	    
	    .header {
		width: 100%;
		@extend .opaque;
		@extend .hexad-3;
		.left { width: 90%; }
		.right { width: 10%; }
		h4 { padding: 0; height: #{$line-height * 1.25em}; line-height: #{$line-height * 1em}; }
		border-bottom: 1px solid;
	    }

	    pre { margin: 0; }
	    .capricon-trigger, .capricon-examples { display: none; }
	    .user-input {
		display: block; width: 100%; 
		.capricon-output { display: block; max-height: 15em; overflow: auto; }
		.capricon-input-prefix {
		    width: 100%;
		    .capricon-input {
			background: black; border: none; font-family: mono; }
		}
	    }
	    .capricon-submit { display: inline-block; margin: 0; }
	    .capricon-output { display: block; }
	}
    }
    h3 { margin: 0 0 1em 0; display: block; width: 100%; border-radius: 0.2em 0.2em 0 0; }
    
    position: fixed;
    top: 3em;
    left: 10%; width: 80%;
    @media (min-width: $break-wide) {
	left: 20%; width: 60%;	
    }
}
